generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// ===== User =====
model User {
  id               String   @id @default(cuid())
  email            String?  @unique
  name             String
  role             UserRole @default(CONSUMER)
  kakaoSub         String?  @unique
  referrerCodeUsed String?
  approve          Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  seller       Seller?
  orders       Order[]
  cart         Cart?
  reviews      Review[]
  qnas         Qna[]
  pointsLedger PointsLedger[]
  userCoupons  UserCoupon[]
  auditLogs    AuditLog[]
  wishlist     Wishlist[]
  referralCode ReferralCode?  @relation(fields: [referrerCodeUsed], references: [code])

  @@index([referrerCodeUsed]) // 💡 조회 최적화
  @@map("users")
}

model Seller {
  id                 String   @id @default(cuid())
  userId             String   @unique
  companyName        String
  representativeName String
  phone              String   @unique
  address            String
  isVerified         Boolean  @default(false)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralCodes ReferralCode[]

  @@map("sellers")
}

model ReferralCode {
  id              String    @id @default(cuid())
  code            String    @unique
  currentUses     Int       @default(0)
  isActive        Boolean   @default(true)
  sellerId        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  seller Seller? @relation(fields: [sellerId], references: [id])
  users  User[]

  @@map("referral_codes")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Vendor {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique   // KLJ, HOYD 등 짧은 식별자
  isActive  Boolean   @default(true)
  cutoffTime   String?   // "16:00" 등 발주 마감시간
  notes        Json?     // 엑셀 템플릿, 열 매핑, 특이사항 등

  // Relations
  products  Product[]            // 1 : N (Vendor → Products)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("vendors")
}


// ===== Product =====
model Product {
  id                String   @id @default(cuid())
  name              String
  description       String
  shortDescription  String?
  priceB2B          Decimal  @db.Decimal(12, 2)  // ← Float -> Decimal
  priceB2C          Decimal  @db.Decimal(12, 2)  // ← Float -> Decimal
  comparePrice      Decimal? @db.Decimal(12, 2)
  sku               String   @unique @default(uuid())
  weight            Decimal? @db.Decimal(10, 3)  // 💡 필요시 정밀도 조정
  length            Decimal? @db.Decimal(10, 2)
  width             Decimal? @db.Decimal(10, 2)
  height            Decimal? @db.Decimal(10, 2)
  images            Json     // ← String[] -> Json (MySQL 리스트 미지원)
  categoryId        String
  vendorId          String?
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  stockQuantity     Int      @default(0)
  lowStockThreshold Int?
  tags              Json     // ← String[] -> Json
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  descriptionImages Json?

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  vendor     Vendor?  @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  qnas       Qna[]
  wishlist   Wishlist[]

  @@index([categoryId])
  @@index([vendorId]) 
  @@index([isActive, isFeatured])
  @@map("products")
}

// ===== Wishlist =====
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // 한 사용자가 같은 상품을 중복 찜할 수 없음
  @@index([userId])
  @@index([productId])
  @@map("wishlist")
}


// ===== Coupon / Payment 등 금액 필드 Decimal로 통일 =====
model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  name          String
  description   String?
  discountType  DiscountType
  discountValue Decimal      @db.Decimal(12, 2)   // 할인율(%) 또는 할인금액(원)
  minAmount     Decimal?     @db.Decimal(12, 2)   // 최소 주문 금액
  maxAmount     Decimal?     @db.Decimal(12, 2)   // 최대 할인 금액
  maxUses       Int?         // 총 사용 가능 횟수
  currentUses   Int          @default(0)          // 현재 사용된 횟수
  userMaxUses   Int?         // 사용자당 사용 가능 횟수
  startsAt      DateTime?    // 사용 시작일
  endsAt        DateTime?    // 사용 종료일
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  orders      Order[]
  userCoupons UserCoupon[]

  @@index([isActive, endsAt]) // 💡 만료/노출 조회용
  @@map("coupons")
}

model UserCoupon {
  id        String   @id @default(cuid())
  userId    String
  couponId  String
  usageCount Int     @default(0) // 해당 사용자의 이 쿠폰 사용 횟수
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model PointsLedger {
  id          String     @id @default(cuid())
  userId      String
  type        PointsType
  amount      Int
  balance     Int
  description String
  metadata    Json?
  createdAt   DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_ledger")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  userId           String
  couponId         String?
  status           OrderStatus @default(PENDING)
  subtotal         Decimal     @db.Decimal(12, 2)
  discountAmount   Decimal     @default(0) @db.Decimal(12, 2)
  shippingAmount   Decimal     @default(0) @db.Decimal(12, 2)
  taxAmount        Decimal     @default(0) @db.Decimal(12, 2)
  totalAmount      Decimal     @db.Decimal(12, 2)
  referralCodeUsed String?
  couponCodeUsed   String?
  shippingAddress  Json
  billingAddress   Json
  notes            String?
  metadata         Json?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  coupon    Coupon?     @relation(fields: [couponId], references: [id])
  items     OrderItem[]
  payments  Payment[]
  shipments Shipment[]
  returns   Return[]
  auditLogs AuditLog[]

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@map("orders")
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  productId      String
  productName    String
  productSku     String
  quantity       Int
  unitPrice      Decimal  @db.Decimal(12, 2)
  totalPrice     Decimal  @db.Decimal(12, 2)
  discountAmount Decimal  @default(0) @db.Decimal(12, 2)
  finalPrice     Decimal  @db.Decimal(12, 2)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  paymentNumber   String        @unique
  amount          Decimal       @db.Decimal(12, 2)
  currency        String        @default("KRW")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  idempotencyKey  String        @unique
  pgTransactionId String?
  pgResponse      Json?
  failureReason   String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  auditLogs AuditLog[]

  @@index([orderId])
  @@map("payments")
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  trackingNumber String         @unique
  carrier        String
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

model Return {
  id           String       @id @default(cuid())
  orderId      String
  reason       String
  status       ReturnStatus @default(PENDING)
  refundAmount Decimal? @db.Decimal(12, 2)
  notes        String?
  metadata     Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("returns")
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  title      String?
  content    String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model Qna {
  id        String   @id @default(cuid())
  productId String?
  userId    String
  question  String
  answer    String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("qnas")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  orderId    String?
  paymentId  String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  payment Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Enums
enum UserRole {
  BIZ
  CONSUMER
  ADMIN
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PointsType {
  EARN
  SPEND
  EXPIRE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  KAKAO_PAY
  NAVER_PAY
  CREDIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}




