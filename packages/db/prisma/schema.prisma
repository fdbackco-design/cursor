generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===== User =====
model User {
  id               String   @id @default(cuid())
  email            String?  @unique
  name             String
  role             UserRole @default(CONSUMER)
  kakaoSub         String?  @unique
  referrerCodeUsed String?
  approve          Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  phoneNumber       String?
  shippingAddress   Json?
  talkMessageAgreed Boolean @default(false)

  // Relations
  seller       Seller?
  orders       Order[]
  cart         Cart?
  reviews      Review[]
  qnas         Qna[]
  pointsLedger PointsLedger[]
  userCoupons  UserCoupon[]
  auditLogs    AuditLog[]
  wishlist     Wishlist[]
  payments     Payment[]
  addresses    UserAddress[]
  referralCode ReferralCode?  @relation(fields: [referrerCodeUsed], references: [code])

  @@index([referrerCodeUsed]) // 💡 조회 최적화
  @@index([phoneNumber])
  @@map("users")
}

model Seller {
  id                 String   @id @default(cuid())
  userId             String   @unique
  companyName        String
  representativeName String
  phone              String   @unique
  address            String
  isVerified         Boolean  @default(false)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralCodes ReferralCode[]

  @@map("sellers")
}

model ReferralCode {
  id          String   @id @default(cuid())
  code        String   @unique
  currentUses Int      @default(0)
  isActive    Boolean  @default(true)
  sellerId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  seller Seller? @relation(fields: [sellerId], references: [id])
  users  User[]

  @@map("referral_codes")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Vendor {
  id         String  @id @default(cuid())
  name       String
  code       String  @unique // KLJ, HOYD 등 짧은 식별자
  isActive   Boolean @default(true)
  cutoffTime String? // "16:00" 등 발주 마감시간
  notes      Json? // 엑셀 템플릿, 열 매핑, 특이사항 등

  // Relations
  products Product[] // 1 : N (Vendor → Products)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

// ===== Product =====
model Product {
  id                String   @id @default(cuid())
  name              String
  description       String
  shortDescription  String?
  priceB2B          Decimal  @db.Decimal(12, 2) // ← Float -> Decimal
  priceB2C          Decimal  @db.Decimal(12, 2) // ← Float -> Decimal
  comparePrice      Decimal? @db.Decimal(12, 2)
  sku               String   @unique @default(uuid())
  weight            Decimal? @db.Decimal(10, 3) // 💡 필요시 정밀도 조정
  length            Decimal? @db.Decimal(10, 2)
  width             Decimal? @db.Decimal(10, 2)
  height            Decimal? @db.Decimal(10, 2)
  images            Json // ← String[] -> Json (MySQL 리스트 미지원)
  categoryId        String
  vendorId          String?
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  stockQuantity     Int      @default(0)
  lowStockThreshold Int?
  tags              Json // ← String[] -> Json
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  descriptionImages Json?

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  vendor     Vendor?     @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  qnas       Qna[]
  wishlist   Wishlist[]

  @@index([categoryId])
  @@index([vendorId])
  @@index([isActive, isFeatured])
  @@map("products")
}

// ===== Wishlist =====
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // 한 사용자가 같은 상품을 중복 찜할 수 없음
  @@index([userId])
  @@index([productId])
  @@map("wishlist")
}

// ===== Coupon / Payment 등 금액 필드 Decimal로 통일 =====
model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  name          String
  description   String?
  discountType  DiscountType
  discountValue Decimal      @db.Decimal(12, 2) // 할인율(%) 또는 할인금액(원)
  minAmount     Decimal?     @db.Decimal(12, 2) // 최소 주문 금액
  maxAmount     Decimal?     @db.Decimal(12, 2) // 최대 할인 금액
  maxUses       Int? // 총 사용 가능 횟수
  currentUses   Int          @default(0) // 현재 사용된 횟수
  userMaxUses   Int? // 사용자당 사용 가능 횟수
  startsAt      DateTime? // 사용 시작일
  endsAt        DateTime? // 사용 종료일
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  orders      Order[]
  userCoupons UserCoupon[]

  @@index([isActive, endsAt]) // 💡 만료/노출 조회용
  @@map("coupons")
}

model UserCoupon {
  id         String    @id @default(cuid())
  userId     String
  couponId   String
  usageCount Int       @default(0) // 해당 사용자의 이 쿠폰 사용 횟수
  deletedAt  DateTime? // 소프트 딜리트를 위한 필드
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model PointsLedger {
  id          String     @id @default(cuid())
  userId      String
  type        PointsType
  amount      Int
  balance     Int
  description String
  metadata    Json?
  createdAt   DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_ledger")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  userId           String
  couponId         String?
  status           OrderStatus @default(PENDING)
  subtotal         Decimal     @db.Decimal(12, 2)
  discountAmount   Decimal     @default(0) @db.Decimal(12, 2)
  shippingAmount   Decimal     @default(0) @db.Decimal(12, 2)
  taxAmount        Decimal     @default(0) @db.Decimal(12, 2)
  totalAmount      Decimal     @db.Decimal(12, 2)
  referralCodeUsed String?
  couponCodeUsed   String?
  shippingAddress  Json
  billingAddress   Json
  notes            String?
  metadata         Json?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  coupon    Coupon?     @relation(fields: [couponId], references: [id])
  items     OrderItem[]
  shipments Shipment[]
  returns   Return[]
  refunds   Refund[]
  reviews   Review[]
  auditLogs AuditLog[]

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@map("orders")
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  productId      String
  productName    String
  productSku     String
  quantity       Int
  unitPrice      Decimal  @db.Decimal(12, 2)
  totalPrice     Decimal  @db.Decimal(12, 2)
  discountAmount Decimal  @default(0) @db.Decimal(12, 2)
  finalPrice     Decimal  @db.Decimal(12, 2)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  allocations ShipmentAllocation[] @relation("OrderItemToAlloc")
  returns     Return[]
  refunds     Refund[]
  reviews     Review[]

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Payment {
  id                  String        @id @default(cuid())
  orderId             String        @unique // 주문 ID (토스페이먼츠용)
  orderName           String // 주문명
  paymentKey          String?       @unique // 토스페이먼츠 결제 키
  paymentNumber       String?       @unique // 결제 번호 (내부용)
  amount              Int // 결제 금액 (정수)
  currency            String        @default("KRW")
  method              String? // 결제 수단 (카드, 계좌이체 등)
  status              PaymentStatus @default(PENDING)
  customerKey         String // 구매자 식별키
  customerId          String // 구매자 ID
  customerEmail       String? // 구매자 이메일
  customerName        String? // 구매자 이름
  customerMobilePhone String? // 구매자 휴대폰번호
  idempotencyKey      String?       @unique
  pgTransactionId     String? // PG 거래 ID
  pgResponse          Json? // PG 응답 데이터
  failureReason       String? // 실패 사유
  approvedAt          DateTime? // 승인 시간
  metadata            Json? // 추가 메타데이터
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  user      User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  auditLogs AuditLog[]

  @@index([customerId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  trackingNumber String         @unique
  carrier        String
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "fk_shipments__order")

  allocations ShipmentAllocation[] @relation("ShipmentToAlloc")

  @@index([carrier])
  @@map("shipments")
}

model ShipmentAllocation {
  id          String @id @default(cuid())
  shipmentId  String
  orderItemId String
  qty         Int    @default(1)

  shipment Shipment @relation("ShipmentToAlloc", fields: [shipmentId], references: [id], onDelete: Cascade, map: "fk_shipment_allocations__shipment")

  orderItem OrderItem @relation("OrderItemToAlloc", fields: [orderItemId], references: [id], onDelete: Cascade, map: "fk_shipment_allocations__order_item")

  @@unique([shipmentId, orderItemId], name: "uq_shipment_allocations__shipment_order_item")
  @@index([orderItemId], name: "ix_shipment_allocations__order_item")
  @@index([shipmentId], name: "ix_shipment_allocations__shipment")
  @@map("shipment_allocations")
}

model Return {
  id                     String       @id @default(cuid())
  orderId                String
  orderItemId            String? // 특정 상품 반품/교환 시
  type                   ReturnType   @default(RETURN) // RETURN, EXCHANGE, CANCEL
  reason                 String // 반품 사유
  status                 ReturnStatus @default(PENDING)
  refundAmount           Decimal?     @db.Decimal(12, 2)
  notes                  String? // 고객 메모
  adminNotes             String? // 관리자 메모
  processedBy            String? // 처리자 ID
  processedAt            DateTime? // 처리 일시
  refundId               String? // PG사 환불 ID
  trackingNumber         String? // 반품 회수 송장번호
  carrier                String? // 반품 회수 택배사
  exchangeTrackingNumber String? // 교환 상품 송장번호
  exchangeCarrier        String? // 교환 상품 택배사
  metadata               Json? // 추가 메타데이터
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  // Relations
  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  refunds   Refund[] // 환불 내역

  @@map("returns")
}

// 환불 사유 분류
enum RefundReason {
  PRODUCT_DEFECT // 상품 불량
  CUSTOMER_CHANGE // 구매자 변심
  DELIVERY_ERROR // 배송 오류
  WRONG_ITEM // 잘못된 상품 배송
  DAMAGED_PACKAGE // 포장 손상
  SIZE_MISMATCH // 사이즈 불일치
  COLOR_MISMATCH // 색상 불일치
  OTHER // 기타
}

// 환불 상태
enum RefundStatus {
  PENDING // 환불 대기
  PROCESSING // 환불 처리 중
  COMPLETED // 환불 완료
  FAILED // 환불 실패
  CANCELLED // 환불 취소
}

// 환불 내역
model Refund {
  id             String       @id @default(cuid())
  returnId       String? // 반품 요청이 있는 경우 (직접 취소는 null)
  orderId        String
  orderItemId    String? // 특정 상품 환불 시
  paymentKey     String // 토스페이먼츠 결제 키
  refundAmount   Decimal      @db.Decimal(12, 2) // 환불 금액
  refundReason   RefundReason // 환불 사유
  status         RefundStatus @default(PENDING) // 환불 상태
  tossRefundId   String? // 토스페이먼츠 환불 ID
  transactionKey String? // 토스페이먼츠 거래 키
  receiptKey     String? // 토스페이먼츠 영수증 키
  refundedAt     DateTime? // 환불 완료 일시
  processedBy    String? // 처리자 ID
  notes          String? // 처리 메모
  metadata       Json? // 추가 메타데이터 (토스페이먼츠 응답 등)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  return    Return?    @relation(fields: [returnId], references: [id], onDelete: Cascade)
  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  orderId     String // 주문 ID 추가
  orderItemId String // 주문 상품 ID 추가
  rating      Int
  title       String?
  content     String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderId, orderItemId]) // 주문별 주문상품별로 한 번만 리뷰 작성 가능
  @@map("reviews")
}

model Qna {
  id        String   @id @default(cuid())
  productId String?
  userId    String
  question  String
  answer    String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("qnas")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  orderId    String?
  paymentId  String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  payment Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Enums
enum UserRole {
  BIZ
  CONSUMER
  ADMIN
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PointsType {
  EARN
  SPEND
  EXPIRE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  KAKAO_PAY
  NAVER_PAY
  CREDIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  PARTIALLY_CANCELLED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum ReturnType {
  RETURN // 반품
  EXCHANGE // 교환
  CANCEL // 취소
}

enum ReturnStatus {
  PENDING // 요청 접수
  APPROVED // 승인
  PROCESSING // 처리중
  COMPLETED // 완료
  REJECTED // 거절
}

// ===== User Address =====
model UserAddress {
  id                   String   @id @default(cuid())
  userId               String
  name                 String // 배송지 별칭 (예: '집', '회사')
  receiverName         String // 수령인 이름
  receiverPhoneNumber1 String // 수령인 전화번호 1
  receiverPhoneNumber2 String? // 수령인 전화번호 2 (선택)
  zoneNumber           String // 우편번호 (새 5자리)
  baseAddress          String // 기본 주소 (도로명 주소)
  detailAddress        String // 상세 주소
  isDefault            Boolean  @default(false) // 기본 배송지 여부
  isActive             Boolean  @default(true) // 활성화 여부
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, isDefault])
  @@map("user_addresses")
}
